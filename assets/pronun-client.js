// assets/pronun-client.js  (v4.5 patched)
// Í≥µÏö© Î∞úÏùåÍ∏∞: Pronun.mount(el, { getReferenceText:()=>string, onResult:(res)=>void, ui:'classic'|'warmup' })
// - Í∏∞Î≥∏Í∞íÏùÄ classic ‚Üí Í∏∞Ï°¥ Ïó∞ÏäµÎ¨∏Ï†ú ÏòÅÌñ• ÏóÜÏùå
// - ui:'warmup' Ïãú ÏõåÎ∞çÏóÖ Ïä§ÌÉÄÏùº(ÎÖπÏùå/Ï†ïÏßÄ/ÌèâÍ∞Ä + VU + LiveSTT ÌõÖ) ÏÇ¨Ïö©
// - ÎÇ¥Î∂Ä Î°úÏßÅ/Ï±ÑÏ†ê/ÎÑ§Ìä∏ÏõåÌÅ¨ ÎèôÏùº
(function (global) {
  'use strict';
  if (global.Pronun && Number(global.Pronun.__v||0) >= 45) return;

  global.PRONUN_UI_DEFAULT = global.PRONUN_UI_DEFAULT || 'classic';

  const CFG = {
    endpoint: (global.PONGDANG_FN_BASE || '/.netlify/functions') + '/analyze-pronunciation',
    minSec: 1.0,   // ÏµúÏÜå Î∞úÌôî Í∏∏Ïù¥ (Í∏∞Ï°¥ 0.8s ‚Üí 1.0s)
    maxSec: 12,
    canvasW: 240, canvasH: 40,
    passBase: 0.75, passShortRef: 0.80, shortRefLen: 4,
    lowSimil: 0.35, lenRatioGarbage: 2.5,
    garbageWords: [
      'Î∞∞Îã¨ÏùòÎØºÏ°±','ÏòÅÏÉÅÌé∏Ïßë','ÏûêÎßâ','Í¥ëÍ≥†','Íµ¨ÎèÖ','Ï¢ãÏïÑÏöî','ÏïåÎ¶ºÏÑ§Ï†ï','Ïä§Ìè∞ÏÑú',
      'ÌõÑÏõê','ÌòëÏ∞¨','Î¨∏Ïùò','ÎßÅÌÅ¨','Îã§Ïö¥Î°úÎìú','ÏÑ§Î™ÖÎûÄ','Ï±ÑÎÑê','Ïä§Ìä∏Î¶¨Î∞ç','Ïç∏ÎÑ§Ïùº',
      'Ïú†ÌäúÎ∏å','ÌÅ¥Î¶≠','Ïù¥Î≤§Ìä∏','ÌäπÍ∞Ä','Í¥ëÍ≥†Ï£º','Ï†úÌú¥','ÎπÑÎîîÏò§','Íµ¨Îß§','Ìï†Ïù∏'
    ]
  };

  // ===== Utils =====
  function h(tag, attrs = {}, ...kids) { const el = document.createElement(tag);
    for (const k in attrs) {
      if (k === 'class') el.className = attrs[k];
      else if (k === 'html') el.innerHTML = attrs[k];
      else el.setAttribute(k, attrs[k]);
    }
    kids.forEach(k => el.appendChild(typeof k === 'string' ? document.createTextNode(k) : k));
    return el;
  }
  function pickMime() {
    const M = window.MediaRecorder;
    if (!M || !M.isTypeSupported) return 'audio/webm';
    if (M.isTypeSupported('audio/webm;codecs=opus')) return 'audio/webm;codecs=opus';
    if (M.isTypeSupported('audio/webm')) return 'audio/webm';
    if (M.isTypeSupported('audio/mp4')) return 'audio/mp4';
    return 'audio/webm';
  }
  function blobToBase64(blob) {
    return new Promise((res, rej) => {
      const fr = new FileReader();
      fr.onerror = rej;
      fr.onload = () => res(String(fr.result || '').split(',')[1] || '');
      fr.readAsDataURL(blob);
    });
  }
  async function postJSON(url, payload) {
    const r = await fetch(url, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json', 'Cache-Control': 'no-store' },
      body: JSON.stringify(payload)
    });
    if (!r.ok) { const t = await r.text().catch(()=>''); throw new Error(`HTTP ${r.status} ${t}`); }
    return r.json();
  }
  function normalizeKo(s){
    if(!s) return { raw:'', ko:'' };
    let t = String(s).toLowerCase()
      .replace(/[\u200B-\u200D\uFEFF]/g,'')
      .replace(/[.,!?;:()[\]{}"‚Äú‚Äù'‚Äò‚Äô`~^%$#+=<>‚Ä¶]/g,' ')
      .replace(/\s+/g,' ')
      .trim();
    const onlyKo = t.replace(/[^„Ñ±-„ÖéÍ∞Ä-Ìû£0-9\s]/g,'').replace(/\s+/g,'').trim();
    return { raw:t, ko:onlyKo };
  }
  function similarity(a, b){
    if(a===b) return 1; const m=a.length,n=b.length; if(!m||!n) return 0;
    const dp = Array.from({length:m+1},()=>Array(n+1).fill(0));
    for(let i=0;i<=m;i++) dp[i][0]=i; for(let j=0;j<=n;j++) dp[0][j]=j;
    for(let i=1;i<=m;i++)for(let j=1;j<=n;j++){
      const cost = a[i-1]===b[j-1]?0:1;
      dp[i][j] = Math.min(dp[i-1][j]+1, dp[i][j-1]+1, dp[i-1][j-1]+cost);
    }
    return 1 - (dp[m][n] / Math.max(m,n));
  }
  function localForceHangulNumbers(s){
    let x = String(s||'');
    x = x.replace(/\b1\b/g,'Ïùº').replace(/\b2\b/g,'Ïù¥');
    x = x.replace(/(^|[^0-9])1([^0-9]|$)/g,'$1Ïùº$2');
    x = x.replace(/(^|[^0-9])2([^0-9]|$)/g,'$1Ïù¥$2');
    return x;
  }
  function coerceTowardsRef(refRaw, hypRaw) {
    let out = hypRaw; const ref = refRaw.replace(/\s+/g,''), hyp = hypRaw.replace(/\s+/g,'');
    const RULES = [
      { when: /^Ïùº$/,  hyp: /^(ÌïòÎÇò|Ìïú|1|‚Ö†)$/, to:'Ïùº' },
      { when: /^Ïù¥$/,  hyp: /^(Îëò|Îëê|2|‚Ö°)$/,   to:'Ïù¥' },
      { when: /^(ÏùºÏùº)$/, hyp: /(ÌïúÏùº|ÌïòÎãê|ÌïúÎãê|1Ïùº|‚Ö†Ïùº)/, to:'ÏùºÏùº' },
      { when: /^(Ïù¥Ïùº)$/, hyp: /(ÎëêÏùº|ÎëòÏùº|2Ïùº|‚Ö°Ïùº)/,       to:'Ïù¥Ïùº' },
      { when: /ÏÇ¨Ïùº/,     hyp: /(ÎÑ§Ïùº|ÎÇ¥Ïùº)/,           to:'ÏÇ¨Ïùº' },
      { when: /ÌïúÏãú/,     hyp: /ÏùºÏãú/,                  to:'ÌïúÏãú' },
      { when: /Ïã≠Ïú†Î°ú/,   hyp: /Ïó¥Ïú†Î°ú/,                to:'Ïã≠Ïú†Î°ú' },
      { when: /ÏÇºÏã≠Î∂Ñ/,   hyp: /ÏÑúÎ•∏Î∂Ñ/,                to:'ÏÇºÏã≠Î∂Ñ' },
      { when: /ÏÑ∏ÏÇ¥/,     hyp: /ÏÇºÏÇ¥/,                  to:'ÏÑ∏ÏÇ¥' }
    ];
    for (const r of RULES) if (r.when.test(ref) && r.hyp.test(hyp)) return r.to;
    return out;
  }

  // === Garbage transcript guard ===
  function isGarbageTranscript(refN, hypN, rawTranscript, durSec) {
    const koRef = refN?.ko || ''; const koHyp = hypN?.ko || ''; const raw = String(rawTranscript || '').trim();
    if (!Number.isFinite(durSec) || durSec < CFG.minSec) return { bad:true, reason:'too_short' };
    if (!koHyp || koHyp.length < 2) return { bad:true, reason:'empty_or_tiny' };
    // ÌïúÍµ≠Ïñ¥ ÎπÑÏú® Ï≤¥ÌÅ¨
    const rawNoSpace = (hypN.raw || '').replace(/\s+/g,'');
    const koRatio = hypN.ko.length / Math.max(1, rawNoSpace.length);
    if (koRatio < 0.35) return { bad:true, reason:'low_korean_ratio' };
    if (koRef && koHyp.length > Math.max(6, koRef.length * CFG.lenRatioGarbage))
      return { bad:true, reason:'too_long_vs_ref' };
    if (CFG.garbageWords.some(w => raw.includes(w))) return { bad:true, reason:'blacklist' };
    const sim = similarity(koRef, koHyp);
    if (koRef && koRef.length >= CFG.shortRefLen && sim < CFG.lowSimil)
      return { bad:true, reason:'very_low_similarity' };
    return { bad:false };
  }

  // ===== VU, UI ===== (ÏÉùÎûµ: Í∏∞Ï°¥ Í∑∏ÎåÄÎ°ú Ïú†ÏßÄ)

  // ... buildClassicUI / buildWarmupUI / mount Ï†ïÏùò Í∑∏ÎåÄÎ°ú ...
  // [Ï§ëÎûµ: ÏõêÎ≥∏Í≥º ÎèôÏùº, Ï∞®Ïù¥Îäî evalRec ÎÇ¥Î∂ÄÎßå ÏïÑÎûòÏ≤òÎüº ÏàòÏ†ïÎê®]

async function evalRec(){
  if (evalBusy) return;

  // ‚õî ÏµúÏÜå Î∞úÌôî Í∏∏Ïù¥ Í∞ÄÎìú ‚Äî ÎÑàÎ¨¥ ÏßßÏúºÎ©¥ ÌèâÍ∞Ä ÏûêÏ≤¥ Ï§ëÎã®(+Îã§Ïãú ÏãúÎèÑ Í∞ÄÎä•)
  if (lastDur < CFG.minSec) {
    ui.msg.textContent = `‚è±Ô∏è Ï¢Ä Îçî Í∏∏Í≤å ÎßêÌï¥ Ï£ºÏÑ∏Ïöî (‚â• ${CFG.minSec}s) / Parlez un peu plus longtemps`;
    // ‚ñ∂ Îã§Ïãú ÏãúÎèÑ Í∞ÄÎä•ÌïòÎèÑÎ°ù Î≤ÑÌäº ÏÉÅÌÉú Î≥µÍµ¨
    ui.btnStart.disabled = false;
    ui.btnStop.disabled  = true;
    ui.btnEval.disabled  = true;
    return;
  }

  if (!chunks.length) {
    ui.msg.textContent = 'üîÅ Î®ºÏ†Ä ÎÖπÏùåÌïòÏÑ∏Ïöî / Enregistrez d‚Äôabord';
    ui.btnStart.disabled = false;
    ui.btnStop.disabled  = true;
    ui.btnEval.disabled  = true;
    return;
  }
  const refOrig = String(getRef()||'').trim();
  if (!refOrig){
    ui.msg.textContent = 'üìù Î¨∏Ïû• Ï§ÄÎπÑ Ï§ë / Phrase non pr√™te';
    ui.btnStart.disabled = false;
    ui.btnStop.disabled  = true;
    ui.btnEval.disabled  = true;
    return;
  }

  evalBusy = true;
  // ... (Ïù¥Ìïò Í∏∞Ï°¥ Î°úÏßÅ Ïú†ÏßÄ)
}

  // Ïù¥Ìïò Í∏∞Ï°¥ Î°úÏßÅ Ïú†ÏßÄ‚Ä¶

      const blob = new Blob(chunks, { type: (mime.split(';')[0]||'audio/webm') });
      const base64 = await blobToBase64(blob);
      ui.msg.textContent = '‚è≥ √âvaluation‚Ä¶ / ÌèâÍ∞Ä Ï§ë‚Ä¶';
let transcript = '', accuracy = null, needsRetry = false;

try {
  const res = await postJSON(CFG.endpoint, {
    referenceText: refOrig,
    options: { strictTranscript: true, disableLM: true },
    audio: {
      base64,
      mimeType: blob.type || 'audio/webm',
      filename: 'rec.webm',
      duration: lastDur
    }
  });
  accuracy = res?.accuracy ?? null;
  transcript = String(res?.transcript || '');
  needsRetry = !!res?.needsRetry;
} catch (e) {
  ui.msg.textContent='‚ö†Ô∏è Analyse indisponible. R√©essaie. / ÏÑúÎ≤Ñ Ïò§Î•ò';
  evalBusy=false; try{ onResult({ status:'error', reason:'server_error' }); }catch(_){}
  return;
}

// üëâ ÏÑúÎ≤Ñ ÏùëÎãµÏùÑ Î∞õÏùÄ "Îã§Ïùå"Ïóê Îπà/Ï¥àÎã®Ìé∏ Í∞ÄÎìú
if (!transcript || transcript.replace(/\s+/g,'').length < 2) {
  const out = { status:'retry', transcript:'', accuracy:0, needsRetry:true, duration:lastDur, reason:'too_short_transcript' };
  ui.msg.textContent = '‚ö†Ô∏è Îçî ÎòêÎ†∑ÌïòÍ≥† Í∏∏Í≤å ÎßêÌï¥ Ï£ºÏÑ∏Ïöî / Parlez plus clairement et un peu plus longtemps';
  try { onResult(out); } catch(_) {}
  evalBusy = false;
  return;
}

transcript = localForceHangulNumbers(transcript);
const refForCoerce = localForceHangulNumbers(refOrig);
transcript = coerceTowardsRef(refForCoerce, transcript);

const refN = normalizeKo(refForCoerce);
const hypN = normalizeKo(transcript);
const g = isGarbageTranscript(refN, hypN, transcript, lastDur);
if (g.bad) {
  const out = { status:'retry', transcript:'', accuracy:0, needsRetry:true, duration:lastDur, reason:g.reason };
  ui.msg.textContent = '‚ö†Ô∏è Parlez plus distinctement. / ÎòêÎ∞ïÎòêÎ∞ï Îçî Î∂ÑÎ™ÖÌïòÍ≤å ÎßêÌï¥Ïöî.';
  try { onResult(out); } catch(_) {}
  evalBusy=false; return;
}

      const g = isGarbageTranscript(refN, hypN, transcript, lastDur);
      if (g.bad) {
        const out = { status:'retry', transcript:'', accuracy:0, needsRetry:true, duration:lastDur, reason:g.reason };
        ui.msg.textContent = '‚ö†Ô∏è Parlez plus distinctement. / ÎòêÎ∞ïÎòêÎ∞ï Îçî Î∂ÑÎ™ÖÌïòÍ≤å ÎßêÌï¥Ïöî.';
        try { onResult(out); } catch(_) {}
        evalBusy=false; return;
      }

      // Ïù¥Ìïò ÏõêÎ≥∏Í≥º ÎèôÏùº (needsRetry Î≥¥Ï†ï, accuracy Î≥¥Ï†ï, out Íµ¨ÏÑ±, ÏΩúÎ∞±, ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏)
    }

  // ===== Í≥µÍ∞ú API =====
  global.Pronun = { mount, __v: 45 };
})(window);
