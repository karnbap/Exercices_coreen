// assets/pronun-client.js  (v4.8 final)
// Í≥µÏö© Î∞úÏùåÍ∏∞: Pronun.mount(el, { getReferenceText:()=>string, onResult:(res)=>void, ui:'classic'|'warmup', maxSeconds?:number })
// - Ïã§ÏãúÍ∞Ñ Í≤ΩÍ≥ºÏãúÍ∞Ñ ÌëúÏãú(Ïòà: "üéôÔ∏è ÎÖπÏùå Ï§ë‚Ä¶ 1.3 s")
// - maxSeconds(Í∏∞Î≥∏ 12Ï¥à) ÏòµÏÖò/Ï†ÑÏó≠ Ïò§Î≤ÑÎùºÏù¥Îìú ÏßÄÏõê(PRONUN_MAX_SEC)
// - ÏßßÏùÄ ÎÖπÏùå/ÏóêÎü¨ ÏãúÏóêÎèÑ Ìï≠ÏÉÅ Ïû¨ÎÖπÏùå Í∞ÄÎä•(Î≤ÑÌäº Î≥µÍµ¨)
// - ÏÑúÎ≤ÑÏ∏° Î≥¥Ï†ï ÎπÑÌôúÏÑ± ÏöîÏ≤≠(strictTranscript/disableLM)
// - Í≥µÏö© ÏúÑÏ†ØÏù¥Îùº Î™®Îì† ÎØ∏Îûò Ïó∞ÏäµÎ¨∏Ï†úÏóê ÏûêÎèô Ï†ÅÏö©
(function (global) {
  'use strict';

  // Ï§ëÎ≥µ Î°úÎìú Í∞ÄÎìú
  if (global.Pronun && Number(global.Pronun.__v||0) >= 48) return;

  // Í∏∞Î≥∏ UI Î™®Îìú(Ïô∏Î∂ÄÏóêÏÑú window.PRONUN_UI_DEFAULT='warmup' Îì± ÏßÄÏ†ï Í∞ÄÎä•)
  global.PRONUN_UI_DEFAULT = global.PRONUN_UI_DEFAULT || 'classic';

  // ===== ÏÑ§Ï†ï =====
  const CFG = {
    endpoint: (global.PONGDANG_FN_BASE || '/.netlify/functions') + '/analyze-pronunciation',
    minSec: 1.0,           // ‚è±Ô∏è ÏµúÏÜå Î∞úÌôî Í∏∏Ïù¥
    maxSec: 12,            // ‚è±Ô∏è ÏµúÎåÄ ÎÖπÏùå Í∏∏Ïù¥(Ïã§ÏãúÍ∞Ñ ÌÉÄÏù¥Î®∏/ÏûêÎèôÏ†ïÏßÄÏóê ÏÇ¨Ïö©)
    canvasW: 240, canvasH: 40,
    passBase: 0.75, passShortRef: 0.80, shortRefLen: 4,
    lowSimil: 0.35, lenRatioGarbage: 2.5,
    garbageWords: [
      'Î∞∞Îã¨ÏùòÎØºÏ°±','ÏòÅÏÉÅÌé∏Ïßë','ÏûêÎßâ','Í¥ëÍ≥†','Íµ¨ÎèÖ','Ï¢ãÏïÑÏöî','ÏïåÎ¶ºÏÑ§Ï†ï','Ïä§Ìè∞ÏÑú',
      'ÌõÑÏõê','ÌòëÏ∞¨','Î¨∏Ïùò','ÎßÅÌÅ¨','Îã§Ïö¥Î°úÎìú','ÏÑ§Î™ÖÎûÄ','Ï±ÑÎÑê','Ïä§Ìä∏Î¶¨Î∞ç','Ïç∏ÎÑ§Ïùº',
      'Ïú†ÌäúÎ∏å','ÌÅ¥Î¶≠','Ïù¥Î≤§Ìä∏','ÌäπÍ∞Ä','Í¥ëÍ≥†Ï£º','Ï†úÌú¥','ÎπÑÎîîÏò§','Íµ¨Îß§','Ìï†Ïù∏'
    ]
  };
  // Ï†ÑÏó≠ Ïò§Î≤ÑÎùºÏù¥Îìú(ÏÑ†ÌÉù)
  if (Number.isFinite(global.PRONUN_MIN_SEC)) {
    CFG.minSec = Math.max(0.5, Number(global.PRONUN_MIN_SEC));
  }
  if (Number.isFinite(global.PRONUN_MAX_SEC)) {
    CFG.maxSec = Math.max(CFG.minSec + 1, Number(global.PRONUN_MAX_SEC));
  }
  // ---- AudioContext singleton & safe closer ----
let __pdAudioCtx = null;

function pdGetAudioCtx() {
  if (__pdAudioCtx && __pdAudioCtx.state !== 'closed') return __pdAudioCtx;
    __pdAudioCtx = new (window.AudioContext || window.webkitAudioContext)();
  return __pdAudioCtx;
}

async function pdSafeCloseCtx() {
  if (!__pdAudioCtx) return;
  try {
    // Ïù¥ÎØ∏ closedÎ©¥ ÏïÑÎ¨¥ Í≤ÉÎèÑ Ïïà Ìï®
    if (__pdAudioCtx.state === 'closed') { __pdAudioCtx = null; return; }
    // ÏàòÏóÖ ÎèÑÏ§ëÏóêÎäî suspendÍπåÏßÄÎßå (Ïû¨Í∞ú Í∞ÄÎä•)
    await __pdAudioCtx.suspend();
  } catch (_) {}
}

// ÌÉ≠/ÌéòÏù¥ÏßÄ Îñ†ÎÇ† ÎïåÎßå Ïã§Ï†ú close
window.addEventListener('pagehide', async () => {
  if (__pdAudioCtx && __pdAudioCtx.state !== 'closed') {
    try { await __pdAudioCtx.close(); } catch (_) {}
    __pdAudioCtx = null;
  }
});

  // ===== Utils =====
  const $ = (s, r=document)=>r.querySelector(s);

  function h(tag, attrs = {}, ...kids) {
    const el = document.createElement(tag);
    for (const k in attrs) {
      if (k === 'class') el.className = attrs[k];
      else if (k === 'html') el.innerHTML = attrs[k];
      else if (attrs[k] !== undefined) el.setAttribute(k, attrs[k]);
    }
    kids.forEach(k => el.appendChild(typeof k === 'string' ? document.createTextNode(k) : k));
    return el;
  }

  function pickMime() {
    const M = window.MediaRecorder;
    if (!M || !M.isTypeSupported) return 'audio/webm';
    if (M.isTypeSupported('audio/webm;codecs=opus')) return 'audio/webm;codecs=opus';
    if (M.isTypeSupported('audio/webm')) return 'audio/webm';
    if (M.isTypeSupported('audio/mp4')) return 'audio/mp4';
    return 'audio/webm';
  }

  function blobToBase64(blob) {
    return new Promise((res, rej) => {
      const fr = new FileReader();
      fr.onerror = rej;
      fr.onload = () => res(String(fr.result || '').split(',')[1] || '');
      fr.readAsDataURL(blob);
    });
  }

  async function postJSON(url, payload) {
    const r = await fetch(url, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json', 'Cache-Control': 'no-store' },
      body: JSON.stringify(payload)
    });
    if (!r.ok) { const t = await r.text().catch(()=> ''); throw new Error(`HTTP ${r.status} ${t}`); }
    return r.json();
  }

  function normalizeKo(s){
    if(!s) return { raw:'', ko:'' };
    let t = String(s).toLowerCase()
      .replace(/[\u200B-\u200D\uFEFF]/g,'')
      .replace(/[.,!?;:()[\]{}"‚Äú‚Äù'‚Äò‚Äô`~^%$#+=<>‚Ä¶]/g,' ')
      .replace(/\s+/g,' ')
      .trim();
    const onlyKo = t.replace(/[^„Ñ±-„ÖéÍ∞Ä-Ìû£0-9\s]/g,'').replace(/\s+/g,'').trim();
    return { raw:t, ko:onlyKo };
  }

  function similarity(a, b){
    if(a===b) return 1; const m=a.length,n=b.length; if(!m||!n) return 0;
    const dp = Array.from({length:m+1},()=>Array(n+1).fill(0));
    for(let i=0;i<=m;i++) dp[i][0]=i; for(let j=0;j<=n;j++) dp[0][j]=j;
    for(let i=1;i<=m;i++)for(let j=1;j<=n;j++){
      const cost = a[i-1]===b[j-1]?0:1;
      dp[i][j] = Math.min(dp[i-1][j]+1, dp[i][j-1]+1, dp[i-1][j-1]+cost);
    }
    return 1 - (dp[m][n] / Math.max(m,n));
  }

  // Ïà´Ïûê/ÎÇ†Ïßú Í∞ÑÎã® Î≥¥Ï†ï(Î°úÏª¨)
  function localForceHangulNumbers(s){
    let x = String(s||'');
    x = x.replace(/\b1\b/g,'Ïùº').replace(/\b2\b/g,'Ïù¥');
    x = x.replace(/(^|[^0-9])1([^0-9]|$)/g,'$1Ïùº$2');
    x = x.replace(/(^|[^0-9])2([^0-9]|$)/g,'$1Ïù¥$2');
    return x;
  }

  // Ï∞∏Ï°∞ ÌòïÌÉúÎ°ú Ïú†ÎèÑ(ÏûêÏ£º Ìó∑Í∞àÎ¶¨Îäî ÌéòÏñ¥ ÍµêÏ†ï)
  function coerceTowardsRef(refRaw, hypRaw) {
    let out = hypRaw; const ref = refRaw.replace(/\s+/g,''), hyp = hypRaw.replace(/\s+/g,'');
    const RULES = [
      { when: /^Ïùº$/,  hyp: /^(ÌïòÎÇò|Ìïú|1|‚Ö†)$/, to:'Ïùº' },
      { when: /^Ïù¥$/,  hyp: /^(Îëò|Îëê|2|‚Ö°)$/,   to:'Ïù¥' },
      { when: /^(ÏùºÏùº)$/, hyp: /(ÌïúÏùº|ÌïòÎãê|ÌïúÎãê|1Ïùº|‚Ö†Ïùº)/, to:'ÏùºÏùº' },
      { when: /^(Ïù¥Ïùº)$/, hyp: /(ÎëêÏùº|ÎëòÏùº|2Ïùº|‚Ö°Ïùº)/,       to:'Ïù¥Ïùº' },
      { when: /ÏÇ¨Ïùº/,     hyp: /(ÎÑ§Ïùº|ÎÇ¥Ïùº)/,           to:'ÏÇ¨Ïùº' },
      { when: /ÌïúÏãú/,     hyp: /ÏùºÏãú/,                  to:'ÌïúÏãú' },
      { when: /Ïã≠Ïú†Î°ú/,   hyp: /Ïó¥Ïú†Î°ú/,                to:'Ïã≠Ïú†Î°ú' },
      { when: /ÏÇºÏã≠Î∂Ñ/,   hyp: /ÏÑúÎ•∏Î∂Ñ/,                to:'ÏÇºÏã≠Î∂Ñ' },
      { when: /ÏÑ∏ÏÇ¥/,     hyp: /ÏÇºÏÇ¥/,                  to:'ÏÑ∏ÏÇ¥' }
    ];
    for (const r of RULES) if (r.when.test(ref) && r.hyp.test(hyp)) return r.to;
    return out;
  }

  // === Garbage transcript guard ===
  function isGarbageTranscript(refN, hypN, rawTranscript, durSec) {
    const koRef = refN?.ko || ''; const koHyp = hypN?.ko || ''; const raw = String(rawTranscript || '').trim();
    if (!Number.isFinite(durSec) || durSec < CFG.minSec) return { bad:true, reason:'too_short' };
    if (!koHyp || koHyp.length < 2) return { bad:true, reason:'empty_or_tiny' };
    const rawNoSpace = (hypN.raw || '').replace(/\s+/g,'');
    const koRatio = hypN.ko.length / Math.max(1, rawNoSpace.length);
    if (koRatio < 0.35) return { bad:true, reason:'low_korean_ratio' };
    if (koRef && koHyp.length > Math.max(6, koRef.length * CFG.lenRatioGarbage))
      return { bad:true, reason:'too_long_vs_ref' };
    if (CFG.garbageWords.some(w => raw.includes(w))) return { bad:true, reason:'blacklist' };
    const sim = similarity(koRef, koHyp);
    if (koRef && koRef.length >= CFG.shortRefLen && sim < CFG.lowSimil)
      return { bad:true, reason:'very_low_similarity' };
    return { bad:false };
  }

  // === Ïã§Ìå®/ÏßßÏùÄÎÖπÏùå Ïãú Ïû¨ÏãúÎèÑ Í∞ÄÎä•ÌïòÍ≤å Î≥µÍµ¨ ===
  function _recoverToReady(ui){
    if (!ui) return;
    if (ui.btnStart) ui.btnStart.disabled = false;
    if (ui.btnStop)  ui.btnStop.disabled  = true;
    if (ui.btnEval)  ui.btnEval.disabled  = true;
    if (typeof global.PRONUN_ON_SHORT === 'function') {
      try { global.PRONUN_ON_SHORT(CFG.minSec); } catch(_){}
    }
  }

  // ===== Í≥µÏö© UI ÎπåÎçî =====
  function buildVUCanvas(w,h){
    const c = document.createElement('canvas'); c.width=w; c.height=h;
    c.className = 'mt-1 w-full'; return c;
  }

  function buildClassicUI(root){
    const ui = {};
    root.classList.add('pronun-classic');
    const title = h('div', { class:'text-sm text-slate-600 mb-1' }, 'üé§ Enregistrer & tester / ÎÖπÏùå¬∑Î∞úÏùå ÌèâÍ∞Ä');
    const ctrl  = h('div', { class:'flex items-center gap-2 mb-1' });
    ui.btnStart = h('button', { class:'btn btn-secondary' }, 'D√©marrer');
    ui.btnStop  = h('button', { class:'btn btn-outline', disabled:'' }, '‚ñ† Stop');
    ui.btnEval  = h('button', { class:'btn btn-primary', disabled:'' }, '√âvaluer');
    ctrl.append(ui.btnStart, ui.btnStop, ui.btnEval);

    ui.canvas = buildVUCanvas(CFG.canvasW, CFG.canvasH);
    ui.msg = h('div', { class:'text-sm text-slate-600 mt-1' }, 'D√©marrer ‚Üí Arr√™ter ‚Üí √âvaluer.');

    root.append(title, ctrl, ui.canvas, ui.msg);
    return ui;
  }

  function buildWarmupUI(root){
    const ui = {};
    root.classList.add('pronun-warmup');
    const title = h('div', { class:'text-sm text-slate-600 mb-1' }, 'üé§ Enregistrer & tester / ÎÖπÏùå¬∑Î∞úÏùå ÌèâÍ∞Ä');

    const ctrl  = h('div', { class:'flex flex-wrap gap-2 mb-2' });
    ui.btnStart = h('button', { class:'px-3 py-1 rounded bg-emerald-600 text-white' }, '‚óè Rec');
    ui.btnStop  = h('button', { class:'px-3 py-1 rounded bg-slate-300', disabled:'' }, '‚ñ† Stop');
    ui.btnEval  = h('button', { class:'px-3 py-1 rounded bg-blue-600 text-white', disabled:'' }, '‚úî √âvaluer');
    ctrl.append(ui.btnStart, ui.btnStop, ui.btnEval);

    ui.canvas = buildVUCanvas(CFG.canvasW, CFG.canvasH);
    ui.msg = h('div', { class:'text-xs text-slate-600 mt-1' }, 'D√©marrer ‚Üí Arr√™ter ‚Üí √âvaluer.');

    root.append(title, ctrl, ui.canvas, ui.msg);
    return ui;
  }

  // ===== ÎÖπÏùå ÎÇ¥Î∂Ä =====
function makeRecorder(drawCanvas){
    let mediaRecorder=null, chunksLocal=[], raf=0, ac=null, analyser=null, stream=null, mime='audio/webm', tStart=0;

    function clearCanvas(){
      if (!drawCanvas) return;
      const g = drawCanvas.getContext('2d'); g.clearRect(0,0,drawCanvas.width,drawCanvas.height);
    }

    async function start(){
      stop(); // Ï§ëÎ≥µ Î∞©ÏßÄ
      stream = await navigator.mediaDevices.getUserMedia({ audio:true });
      mime = pickMime();
      mediaRecorder = mime ? new MediaRecorder(stream, { mimeType:mime }) : new MediaRecorder(stream);
      tStart = performance.now();

      chunksLocal = [];
      mediaRecorder.ondataavailable = e => { if (e.data && e.data.size) chunksLocal.push(e.data); };

      ac = pdGetAudioCtx(); // Ï†ÑÏó≠ Ïã±Í∏ÄÌÑ¥ AudioContext
    const source = ac.createMediaStreamSource(stream);

      analyser = ac.createAnalyser(); analyser.fftSize = 512;
      source.connect(analyser);

      const g = drawCanvas.getContext('2d'), w = drawCanvas.width, h = drawCanvas.height;
      const data = new Uint8Array(analyser.frequencyBinCount);
      (function loop(){
        raf = requestAnimationFrame(loop);
        analyser.getByteFrequencyData(data);
        g.clearRect(0,0,w,h);
        g.fillStyle = '#6366f1';
        const bars=32, step=Math.floor(data.length/bars);
        for(let i=0;i<bars;i++){
          const v=data[i*step]/255, bh=v*h;
          g.fillRect(i*(w/bars)+2, h-bh, (w/bars)-4, bh);
        }
      })();

      mediaRecorder.start(50);
      return { mime, stop:() => new Promise(resolve=>{
        const finalize=()=>resolve({ chunks:chunksLocal.slice(), mime });
        if (mediaRecorder && mediaRecorder.state==='recording') {
          mediaRecorder.addEventListener('stop', finalize, { once:true });
          mediaRecorder.stop();
        } else finalize();
      })};
    }

    function stop(){
      try { if (mediaRecorder && mediaRecorder.state==='recording') mediaRecorder.stop(); } catch(_){}
      try { stream?.getTracks().forEach(t => t.stop()); } catch(_){}
    try { await pdSafeCloseCtx(); } catch(_){}
      stream=null; mediaRecorder=null; analyser=null;
      if (raf) cancelAnimationFrame(raf); raf=0;
      clearCanvas();
    }

    async function finalizeToBlobDuration(chunks, mimeType){
      const blob = new Blob(chunks, { type:(mimeType.split(';')[0]||'audio/webm') });
      // Î©îÌÉÄÎç∞Ïù¥ÌÑ∞ Í∏∞Î∞ò Ïã§Ï†ú Í∏∏Ïù¥ ÏÇ∞Ï∂ú(Î∏åÎùºÏö∞Ï†Ä/Î≤ÑÌçº ÏòÅÌñ• ÏµúÏÜåÌôî)
      const url = URL.createObjectURL(blob);
      const audio = new Audio(url);
      return await new Promise((resolve)=>{
audio.addEventListener('loadedmetadata', ()=>{
  const dur = Number(audio.duration||0);
  const approx = Math.max(0,(performance.now()-tStart)/1000);
  URL.revokeObjectURL(url);
  resolve({ blob, duration: dur, approx });
}, { once:true });

      });
    }

    return { start, stop, finalizeToBlobDuration, get mime(){ return mime; } };
  }

  // ===== Ï†ÑÏó≠ ÏÉÅÌÉú =====
  let chunks=[], lastDur=0, mime='audio/webm', evalBusy=false;

  // ===== Î©îÏù∏ ÌèâÍ∞Ä =====
  async function doEvaluate(ui, getRef, onResult){
    if (evalBusy) return;

    if (lastDur < CFG.minSec) {
      ui.msg.textContent = `‚è±Ô∏è Ï¢Ä Îçî Í∏∏Í≤å ÎßêÌï¥ Ï£ºÏÑ∏Ïöî (‚â• ${CFG.minSec}s) / Parlez un peu plus longtemps`;
      _recoverToReady(ui);
      return;
    }
    if (!chunks.length) {
      ui.msg.textContent = 'üîÅ Î®ºÏ†Ä ÎÖπÏùåÌïòÏÑ∏Ïöî / Enregistrez d‚Äôabord';
      _recoverToReady(ui);
      return;
    }
    const refOrig = String(getRef?.()||'').trim();
    if (!refOrig){
      ui.msg.textContent = 'üìù Î¨∏Ïû• Ï§ÄÎπÑ Ï§ë / Phrase non pr√™te';
      _recoverToReady(ui);
      return;
    }

    evalBusy = true;

    const blob = new Blob(chunks, { type: (mime.split(';')[0]||'audio/webm') });
    const base64 = await blobToBase64(blob).catch(()=> '');

    ui.msg.textContent = '‚è≥ √âvaluation‚Ä¶ / ÌèâÍ∞Ä Ï§ë‚Ä¶';
    let transcript = '', accuracy = null, needsRetry = false;

    try {
      const res = await postJSON(CFG.endpoint, {
        referenceText: refOrig,
        options: { strictTranscript: true, disableLM: true },
        audio: {
          base64,
          mimeType: blob.type || 'audio/webm',
          filename: 'rec.webm',
          duration: lastDur
        }
      });
      accuracy = res?.accuracy ?? null;
      transcript = String(res?.transcript || '');
      needsRetry = !!res?.needsRetry;
    } catch (e) {
      ui.msg.textContent='‚ö†Ô∏è Analyse indisponible. R√©essaie. / ÏÑúÎ≤Ñ Ïò§Î•ò';
      try{ onResult?.({ status:'error', reason:'server_error' }); }catch(_){}
      evalBusy=false; _recoverToReady(ui); return;
    }

    if (!transcript || transcript.replace(/\s+/g,'').length < 2) {
      ui.msg.textContent = '‚ö†Ô∏è Îçî ÎòêÎ†∑ÌïòÍ≥† Í∏∏Í≤å ÎßêÌï¥ Ï£ºÏÑ∏Ïöî / Parlez plus clairement et un peu plus longtemps';
      try { onResult?.({ status:'retry', transcript:'', accuracy:0, needsRetry:true, duration:lastDur, reason:'too_short_transcript' }); } catch(_){}
      evalBusy = false; _recoverToReady(ui); return;
    }

    transcript = localForceHangulNumbers(transcript);
    const refForCoerce = localForceHangulNumbers(refOrig);
    transcript = coerceTowardsRef(refForCoerce, transcript);

    const refN = normalizeKo(refForCoerce);
    const hypN = normalizeKo(transcript);
    const g = isGarbageTranscript(refN, hypN, transcript, lastDur);
    if (g.bad) {
      ui.msg.textContent = '‚ö†Ô∏è Parlez plus distinctement. / ÎòêÎ∞ïÎòêÎ∞ï Îçî Î∂ÑÎ™ÖÌïòÍ≤å ÎßêÌï¥Ïöî.';
      try { onResult?.({ status:'retry', transcript:'', accuracy:0, needsRetry:true, duration:lastDur, reason:g.reason }); } catch(_){}
      evalBusy=false; _recoverToReady(ui); return;
    }

    const refLen = refN.ko.length;
    const need = (refLen >= CFG.shortRefLen) ? CFG.passBase : CFG.passShortRef;
    const score = (typeof accuracy === 'number')
      ? (accuracy > 1 ? accuracy/100 : accuracy)
      : similarity(refN.ko, hypN.ko);
    const ok = score >= need;

    const out = { status:'ok', transcript, accuracy:score, score, ok, passed:ok, needsRetry, duration:lastDur };
    ui.msg.textContent = ok ? `‚úÖ ${lastDur.toFixed(1)} s ¬∑ Bon travail ! / Ï¢ãÏïÑÏöî!` : `‚ÑπÔ∏è ${lastDur.toFixed(1)} s ¬∑ Ìïú Î≤à Îçî ÎòêÎ∞ïÎòêÎ∞ï!`;
    try { onResult?.(out); } catch(_){}
    evalBusy = false;

    // ÌèâÍ∞Ä ÌõÑÏóêÎèÑ Ïû¨ÎÖπÏùå ÌóàÏö©
    _recoverToReady(ui);
  }

  // ===== Ïû•Ï∞© =====
  function mount(root, opts={}){
    if (!root) return;
    const host = (typeof root === 'string') ? $(root) : root;
    if (!host) return;

    // Ïù∏Ïä§ÌÑ¥Ïä§Î≥Ñ Ïò§Î≤ÑÎùºÏù¥Îìú
    if (Number.isFinite(opts.maxSeconds)) {
      CFG.maxSec = Math.max(CFG.minSec + 1, Number(opts.maxSeconds));
    }

    const getRef  = typeof opts.getReferenceText === 'function' ? opts.getReferenceText : ()=> '';
    const onResult= typeof opts.onResult === 'function' ? opts.onResult : ()=> {};
    const uiMode  = (opts.ui || global.PRONUN_UI_DEFAULT || 'classic');

    const ui = (uiMode === 'warmup') ? buildWarmupUI(host) : buildClassicUI(host);
    const R = makeRecorder(ui.canvas);

    // ÎÖπÏùå ÌÉÄÏù¥Î®∏(Ïã§ÏãúÍ∞Ñ Í≤ΩÍ≥º ÌëúÍ∏∞)
    let recStart = 0, recTimer = 0;
    function startRecTimer(){
      recStart = Date.now();
      stopRecTimer();
      recTimer = window.setInterval(()=>{
        const sec = Math.min(CFG.maxSec, (Date.now() - recStart)/1000);
        ui.msg.textContent = `üéôÔ∏è Enregistrement‚Ä¶ / ÎÖπÏùå Ï§ë‚Ä¶  ${sec.toFixed(1)} s`;
        // ÏµúÎåÄÍ∏∏Ïù¥ ÏûêÎèô Ï†ïÏßÄ
        if (sec >= CFG.maxSec) {
          try { ui.btnStop.click(); } catch(_){}
        }
      }, 100);
    }
    function stopRecTimer(){
      if (recTimer) { clearInterval(recTimer); recTimer = 0; }
    }

    // Start
    ui.btnStart.addEventListener('click', async ()=>{
      try{
        ui.btnStart.disabled = true;
        ui.btnStop.disabled  = true;
        ui.btnEval.disabled  = true;
        ui.msg.textContent   = 'üéôÔ∏è Enregistrement‚Ä¶ / ÎÖπÏùå Ï§ë‚Ä¶';
        startRecTimer();

        const session = await R.start();
        // ÏµúÏÜå 1Ï¥à ÏßÄÎÇòÏïº Stop ÌôúÏÑ±(Ïã§Ïàò Î∞©ÏßÄ)
        setTimeout(()=>{ ui.btnStop.disabled = false; }, 1000);

        // StopÏùÑ ÎàåÎ†ÄÏùÑ Îïå Í≤∞Í≥º Ï†ïÎ¶¨ (Ìïú ÏÑ∏ÏÖòÏóê Ìïú Î≤àÎßå)
        const onStopOnce = async ()=>{
          stopRecTimer();
          try{
            ui.btnStop.disabled = true;
            const out = await session.stop();
            // Ïã§Ï†ú Í∏∏Ïù¥Î°ú duration ÏÇ∞Ï∂ú
const { blob, duration, approx } = await R.finalizeToBlobDuration(out.chunks, out.mime);
chunks = out.chunks.slice();
const durClean = (!isFinite(duration) || duration<=0 || duration>CFG.maxSec-0.05) ? approx : duration;
lastDur = Math.min(CFG.maxSec, Math.max(0, durClean));
mime = out.mime || 'audio/webm';


            // Ìï≠ÏÉÅ Start Î≥µÍµ¨
            ui.btnStart.disabled = false;

            if (!chunks.length || lastDur < CFG.minSec) {
              ui.btnEval.disabled = true;
              ui.msg.textContent = `‚è±Ô∏è ÎÑàÎ¨¥ ÏßßÏïÑÏöî. Ï°∞Í∏à Îçî Í∏∏Í≤å ÎßêÌï¥ Ï£ºÏÑ∏Ïöî (‚â• ${CFG.minSec}s).`;
            } else {
              ui.btnEval.disabled = false;
              ui.msg.textContent = `‚úÖ ${lastDur.toFixed(1)} s ¬∑ ‚Äú√âvaluer / ÌèâÍ∞Ä‚ÄùÎ•º ÎàåÎü¨Î≥¥ÏÑ∏Ïöî.`;
            }
          }catch(_){
            _recoverToReady(ui);
            ui.msg.textContent = 'üéôÔ∏è ÎßàÏù¥ÌÅ¨ Ï≤òÎ¶¨ Ï§ë Î¨∏Ï†úÍ∞Ä ÏûàÏóàÏñ¥Ïöî. Îã§Ïãú ÏãúÎèÑÌï¥ Ï£ºÏÑ∏Ïöî.';
          } finally {
            try{ R.stop(); }catch(_){}
          }
        };
        // once: trueÎùºÏÑú Îß§ ÏÑ∏ÏÖòÏóê Î¶¨Ïä§ÎÑàÍ∞Ä ÎàÑÏ†ÅÎêòÏßÄ ÏïäÏùå
        ui.btnStop.addEventListener('click', onStopOnce, { once:true });
      }catch(_){
        stopRecTimer();
        _recoverToReady(ui);
        ui.msg.textContent = 'üéôÔ∏è ÎßàÏù¥ÌÅ¨ Í∂åÌïúÏùÑ ÌôïÏù∏Ìï¥ Ï£ºÏÑ∏Ïöî / Autorisez le micro';
      }
    });

    // Eval
    ui.btnEval.addEventListener('click', async ()=>{
      await doEvaluate(ui, getRef, onResult);
    });

    return { ui };
  }

  // ===== Í≥µÍ∞ú API =====
  global.Pronun = { mount, __v: 48 };
})(window);
