/* scoring.js
 * - ÌïúÍµ≠Ïñ¥ Î∞úÏùå/Ï≤†Ïûê Ïú†ÏÇ¨ÎèÑ Í∏∞Î∞ò Ï†êÏàò
 * - (Ïã†Í∑ú) ÌÖúÌè¨(ÎßêÌïòÍ∏∞ ÏÜçÎèÑ) ÌéòÎÑêÌã∞ ÏòµÏÖò ÏßÄÏõê
 *
 * ÏÇ¨Ïö©Î≤ï:
 *   Scoring.gradeKO(refText, hypText, {
 *     tempo: { mode:'slow'|'normal'|'fast', refDurationSec:number, userDurationSec:number }
 *   })
 */

(function (global) {
  const isHangul = (ch) => /[Í∞Ä-Ìû£]/.test(ch);
  const norm = (s) =>
    String(s || '')
      .trim()
      .replace(/\s+/g, ' ')
      .replace(/[.,!?;:~„ÄÅ„ÄÇÔºÅÔºüÔºõÔºö]/g, '')
      .toLowerCase();

  // Í∞ÑÎã® Levenshtein
  function lev(a, b) {
    const s = norm(a), t = norm(b);
    const m = s.length, n = t.length;
    if (!m && !n) return 0;
    const dp = Array.from({ length: m + 1 }, () => new Array(n + 1).fill(0));
    for (let i = 0; i <= m; i++) dp[i][0] = i;
    for (let j = 0; j <= n; j++) dp[0][j] = j;
    for (let i = 1; i <= m; i++) {
      for (let j = 1; j <= n; j++) {
        const cost = s[i - 1] === t[j - 1] ? 0 : 1;
        dp[i][j] = Math.min(
          dp[i - 1][j] + 1,
          dp[i][j - 1] + 1,
          dp[i - 1][j - 1] + cost
        );
      }
    }
    return dp[m][n];
  }

  function similarity(a, b) {
    const s = norm(a), t = norm(b);
    const L = Math.max(1, Math.max(s.length, t.length));
    const d = lev(s, t);
    return Math.max(0, 1 - d / L);
  }

  // === (Ïã†Í∑ú) ÌÖúÌè¨ ÌéòÎÑêÌã∞ ===
  // - slow(0.7√ó): ÌéòÎÑêÌã∞ ÏóÜÏùå (ÌïôÏäµ ÏïàÏ†ï)
  // - normal/fast: Í∏∞Ï§Ä Ïò§ÎîîÏò§Î≥¥Îã§ "ÎäêÎ¶¨Î©¥" Í∞êÏ†ê + Ïπ≠Ï∞¨/Ï°∞Ïñ∏ Î¨∏Íµ¨(praise) Ï†úÍ≥µ
  //   ratio = userDuration / refDuration
  function tempoPenalty(tempo) {
    if (!tempo) return { penalty: 0, reason: '', praise: '' };
    const { mode, refDurationSec, userDurationSec } = tempo;
    const safeNum = (x) => (isFinite(x) && x > 0 ? x : 0);
    const ref = safeNum(refDurationSec);
    const usr = safeNum(userDurationSec);
    if (!ref || !usr) return { penalty: 0, reason: '', praise: '' };

    const ratio = usr / ref;                // 1.00 ÎèôÏùº, 1.20 = 20% ÎäêÎ¶º
    const pct = Math.round((ratio - 1) * 100);
    if (mode === 'slow') return { penalty: 0, reason: '', praise: '' };

    let penalty = 0;
    let reason  = '';
    let praise  = '';

    // ÎÑàÎ¨¥ Îπ†Î¶Ñ(Í≥ºÏÜç) Î∞©ÏßÄ
    if (ratio < 0.85) {
      penalty = mode === 'fast' ? 8 : 5;
      reason  = `‚ö†Ô∏è ÎÑàÎ¨¥ Îπ†Î¶Ñ(${Math.abs(pct)}% Îπ†Î¶Ñ) / Trop rapide (${Math.abs(pct)}%)`;
      praise  = `Î¶¨Îì¨ÏùÄ Ï¢ãÏïÑÏöî. Îã§ÏùåÏóî ÎòêÎ∞ïÎòêÎ∞ïÎßå Ïú†ÏßÄÌï¥Î¥êÏöî! / Bon rythme, garde une diction nette üôÇ`;
      return { penalty, reason, praise };
    }

    // ====== Ïπ≠Ï∞¨/Ï°∞Ïñ∏ Îã®Í≥Ñ (ÎπÑÏú® Í∏∞Ï§Ä) ======
    // ‚â§1.10√ó : ÏôÑÎ≤Ω
    // 1.10√ó~1.40√ó : ÏïÑÏ£º ÏûòÌñàÏùå
    // 1.50√ó~2.00√ó : Í¥úÏ∞ÆÏùå
    // 2.00√ó~3.00√ó : ÏïΩÍ∞Ñ ÎäêÎ¶¨ÏßÄÎßå Ïù¥Ìï¥ Í∞ÄÎä•
    // 3.00√ó~4.00√ó : Ï°∞Í∏àÎßå Îçî ÌïòÎ©¥ Îçî ÏûòÌï† Í≤É Í∞ôÏïÑÏöî!!
    // 4.00√ó~5.00√ó : ÎÑàÎ¨¥ ÎäêÎ†§ÏÑú ÎåÄÌôîÍ∞Ä Ïñ¥Î†§ÏõåÏöî. 3Î≤àÎßå Î∞òÎ≥µÌïòÎ©¥ 1Îã®Í≥Ñ Ïò¨ÎùºÍ∞ÄÏöî!
    if (ratio <= 1.10) {
      penalty = 0;
      reason  = '‚úÖ ÏÜçÎèÑ Ï†ÅÏ†à / Vitesse parfaite (‚â§10%)';
      praise  = 'ÏôÑÎ≤ΩÌï¥Ïöî! / Parfait ! üéâ';
    } else if (ratio <= 1.40) {
      penalty = 3;
      reason  = `üëç ÏïΩÍ∞Ñ ÎäêÎ¶º(+${pct}%) / L√©g√®rement plus lent`;
      praise  = 'ÏïÑÏ£º ÏûòÌñàÏñ¥Ïöî! / Tr√®s bien ! üôÇ';
    } else if (ratio <= 2.00) {
      penalty = 8;
      reason  = `‚è±Ô∏è +${pct}% ÎäêÎ¶º / Plus lent`;
      praise  = 'Í¥úÏ∞ÆÏïÑÏöî. Ìïú Î≤àÎßå Îçî Ïù¥Ïñ¥ÏÑú ÎßêÌïòÎ©¥ Ï¢ãÏïÑÏ†∏Ïöî! / Correct, encore une fois !';
    } else if (ratio <= 3.00) {
      penalty = 15;
      reason  = `üêå ÎßéÏù¥ ÎäêÎ¶º(+${pct}%) / Assez lent`;
      praise  = 'ÏïΩÍ∞Ñ ÎäêÎ¶¨ÏßÄÎßå Ïù¥Ìï¥ÎèºÏöî. Ìò∏Ìù°Îßå Ï°∞Í∏à Îçî Î∂ôÏù¥Î©¥ ÏôÑÎ≤Ω! / Compr√©hensible, colle un peu le d√©bit üòâ';
    } else if (ratio <= 4.00) {
      penalty = 25;
      reason  = `üê¢ Îß§Ïö∞ ÎäêÎ¶º(+${pct}%) / Tr√®s lent`;
      praise  = 'Ï°∞Í∏àÎßå Îçî ÌïòÎ©¥ Îçî ÏûòÌï† Í≤É Í∞ôÏïÑÏöî!! / Tu y es presque, courage !! üí™';
    } else if (ratio <= 5.00) {
      penalty = 35;
      reason  = `üê¢ ÎÑàÎ¨¥ ÎäêÎ¶º(+${pct}%) / Trop lent`;
      praise  = 'ÎÑàÎ¨¥ ÎäêÎ†§ÏÑú ÎåÄÌôîÍ∞Ä Ïñ¥Î†§Ïö∏ Ïàò ÏûàÏñ¥Ïöî. 3Î≤àÎßå Î∞òÎ≥µÌïòÎ©¥ 1Îã®Í≥Ñ Ïò¨ÎùºÍ∞ÄÏöî! / R√©p√®te 3 fois, tu montes d‚Äôun palier ! üöÄ';
    } else {
      penalty = 40;
      reason  = `üê¢ Í∑πÎèÑÎ°ú ÎäêÎ¶º(+${pct}%) / Extr√™mement lent`;
      praise  = 'ÏßßÍ≤å ÎÅäÏßÄ ÎßêÍ≥† Îëê Î¨∏Ïû•ÏùÑ Î∂ôÏó¨Î≥¥Ïûê! / Essaie de lier sans coupure üòâ';
    }

         return {
        score: finalScore,
        baseScore: base,
        tempoPenalty: penalty,
        tempoReason: reason,
        tempoPraise: (tempo && tempo.praise) ? tempo.praise : (reason ? '' : ''),
        similarity: sim,
        ref: refText,
        hyp: hypText
      };


  function clamp01(x) { return Math.min(1, Math.max(0, x)); }

  const Scoring = {
    /**
     * @param {string} refText - Í∏∞Ï§Ä Î¨∏Ïû•
     * @param {string} hypText - ÌïôÏäµÏûê Î¨∏Ïû•(ASR Í≤∞Í≥º Îì±)
     * @param {object} [opts]
     *   - tempo?: { mode:'slow'|'normal'|'fast', refDurationSec:number, userDurationSec:number }
     *   - weightSim?: number (Í∏∞Î≥∏ 1.0)
     */
    gradeKO(refText, hypText, opts = {}) {
      const sim = similarity(refText, hypText); // 0..1
      const weightSim = Number.isFinite(opts.weightSim) ? opts.weightSim : 1.0;

      // Í∏∞Î≥∏ Ï†êÏàò(Î¨∏Ïûê Ïú†ÏÇ¨ÎèÑ Í∏∞Î∞ò 0..100)
      let base = Math.round(sim * 100 * weightSim);

      // ÌÖúÌè¨ ÌéòÎÑêÌã∞ Ï†ÅÏö©
      const { penalty, reason } = tempoPenalty(opts.tempo);
      let finalScore = Math.max(0, Math.min(100, base - penalty));

      // ÏÇ¨ÏÜåÌïú Î¨∏Ïû•Î∂ÄÌò∏/ÎùÑÏñ¥Ïì∞Í∏∞(10% ÎØ∏Îßå)Îäî Ï†ïÎãµ Ï≤òÎ¶¨: Ïú†ÏÇ¨ÎèÑ ÎÜíÏùÑ Îïå Î≥¥Ï†ï
      if (finalScore >= 90 && norm(refText) !== norm(hypText)) {
        finalScore = Math.max(finalScore, 95);
      }

      return {
        score: finalScore,
        baseScore: base,
        tempoPenalty: penalty,
        tempoReason: reason,
        similarity: sim,
        ref: refText,
        hyp: hypText
      };
    }
  };

  global.Scoring = Scoring;
})(window);
